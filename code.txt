 # Install and update necessary libraries
!pip install accelerate -U
!pip install transformers datasets sentencepiece

# Load the dataset
from datasets import load_dataset
data = load_dataset("kde4" ,lang1="en",lang2="fr")
data

# Select a smaller subset of the dataset
small = data["train"].shuffle(seed=42).select(range(210173//2))

# Split the data into training and test sets
split = small.train_test_split(seed=42)
split

# Access a sample from the training set
split["train"][2]

# Load a pre-trained tokenizer
from transformers import AutoTokenizer
checkpoint = "Helsinki-NLP/opus-mt-en-fr"
tokenizer = AutoTokenizer.from_pretrained(checkpoint)

# Tokenize an example
en = split["train"][10]["translation"]["en"]
fr = split["train"][10]["translation"]["fr"]
en, fr

inputs = tokenizer(en)
inputs

# Tokenize targets using target tokenizer
with tokenizer.as_target_tokenizer():
  targets = tokenizer(fr)
  targets

# Create a tokenizer function
max_input_len = 256
max_target_len = 256

def tokenizer_fn(batch):
    inputs = [x["en"] for x in batch["translation"]]
    targets = [x["fr"] for x in batch["translation"]]

    tokenized_inputs = tokenizer(
        inputs,
        max_length=max_input_len,
        truncation=True
    )

    with tokenizer.as_target_tokenizer():
        tokenized_targets = tokenizer(
            targets,
            max_length=max_target_len,
            truncation=True
        )

        tokenized_inputs["labels"] = tokenized_targets["input_ids"]

    return tokenized_inputs

# Store tokenized dataset
tokenized_datasets = split.map(
    tokenizer_fn,
    batched=True,
    remove_columns=split["train"].column_names,
)

# Load a Seq2Seq model
from transformers import AutoModelForSeq2SeqLM
model = AutoModelForSeq2SeqLM.from_pretrained(checkpoint)

# Use DataCollator for padding and converting to torch tensors
from transformers import DataCollatorForSeq2Seq
data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)

# Test DataCollator
batch = data_collator([tokenized_datasets["train"][i] for i in range(1, 3)])
batch.keys()
batch['labels']

# Install BLEU and BERT-score metrics
!pip install sacrebleu bert-score

from datasets import load_metric
bleu_metric = load_metric("sacrebleu")
bert_metric = load_metric("bertscore")

bleu_metric.compute(predictions=["I like cats."], references=[["I love cats."]])

# Create custom metric
import numpy as np

def compute_metrics(preds_and_labels):
    preds, labels = preds_and_labels

    # Convert predictions into words
    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)

    # Replace -100 labels with pad token id
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)

    # Convert labels into words
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    decoded_preds = [pred.strip() for pred in decoded_preds]
    decoded_labels = [[label.strip()] for label in decoded_labels]

    bleu = bleu_metric.compute(
        predictions=decoded_preds,
        references=decoded_labels
    )

    return {"bleu": bleu["score"], "bert_score": np.mean(bert_score["f1"])}

# Create training arguments
from transformers import Seq2SeqTrainingArguments
training_args = Seq2SeqTrainingArguments(
    output_dir="finetuned-model",
    evaluation_strategy="no",
    save_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=32,
    per_device_eval_batch_size=64,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=3,
    predict_with_generate=True,
    fp16=True,
)

# Create a trainer
from transformers import Seq2SeqTrainer
trainer = Seq2SeqTrainer(
    model,
    training_args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["test"],
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,
)

# Train the model
trainer.train()

# Save the trained model
trainer.save_model("my_saved_model")

# Use the saved model for translation
from transformers import pipeline
translator = pipeline("translation", model="my_saved_model", device=0)

# Translate a sentence
translator("This code is about transformers for translation.")
